<?php
/**
 * @file
 * Code for the luggage_question_answer feature.
 */

include_once 'luggage_question_answer.features.inc';

/**
 * Implemenets hook_permission().
 */
function luggage_question_answer_permission() {
  return array (
    'moderate questions and answers' => array (
      'title' => t('Moderate questions and answers'),
    ),
  );
}


/**
 * Implements hook_form_FORMID_alter().
 */
function luggage_question_answer_form_qa_node_form_alter(&$form, &$form_state, $form_id) {
  // If the current user doesn't have permission to moderate Q&A, disable
  // some fields.
  if (!user_access('moderate questions and answers')) {
    // Disable Answer, Answered By, and Answered By URL fields.
    $form['field_qa_answer']['#access'] = FALSE;
    $form['field_qa_answer_by']['#access'] = FALSE;
    $form['field_qa_answer_by_url']['#access'] = FALSE;
    $form['field_category']['#access'] = FALSE;
    $form['field_tags']['#access'] = FALSE;
    $form['field_qa_images']['#access'] = FALSE;
    $form['field_qa_files']['#access'] = FALSE;
    $form['field_qa_question_rating']['#access'] = FALSE;

    // Change the submit button to say "Ask".
    $form['actions']['submit']['#value'] = t('Ask');

    // Change the label for Abbreviated Question to Question Subject.
    $form['field_qa_question_short']['und'][0]['value']['#title'] = t('Question Subject');

  }
}

/**
 * Implements hook_page_build().
 */
function luggage_question_answer_page_build(&$page) {
  // Change the page title on adding a Q&A node.
  if (current_path() == 'node/add/qa') {
    drupal_set_title(t('Ask a Question'));
  }
}

/**
 * Implements hook_views_pre_render().
 */
function luggage_question_answer_views_pre_render(&$view) {
  if ($view->name == 'questions_and_answers' && $view->current_display == 'page' ) {
    // Add RSS Feed to QA pages.

    $rss_url = $GLOBALS['base_url'] . '/' . $view->display['feed_1']->display_options['path'];

    drupal_add_html_head_link(array(
      'rel' => 'alternate',
      'type' => 'application/rss+xml',
      'title' => 'Questions and Answers',
      'href' => $rss_url,
    ));

    // update the footer RSS icon URL.
    if (!empty($view->footer['area']->options['content'])) {
      $view->footer['area']->options['content'] = str_replace("qa/rss.xml", $rss_url, $view->footer['area']->options['content']);
    }

    // Custom CSS for QA Pages.
    drupal_add_css(drupal_get_path('module', 'luggage_question_answer') . '/luggage_question_answer.css');
  }
}

/**
 * Implements hook_node_view().
 */
function luggage_question_answer_node_view($node, $view_mode, $langcode) {
  // Add luggage_question_answer.css to qa nodes.
  if ($node->type == 'qa') {
    drupal_add_css(drupal_get_path('module', 'luggage_question_answer') . '/luggage_question_answer.css');
  }
}

/**
 * Implements template_preprocess_field().
 */
function luggage_question_answer_preprocess_field(&$vars, $hook) {
  // New lines in plain text question should get <br />s.
  if ($vars['element']['#field_name'] == 'field_qa_question') {
    // check_plain() is already run before this string gets here.
    // Then gets run again with check_markup. Avoiding double encoding.
    $vars['items'][0]['#markup'] = check_markup(decode_entities($vars['items'][0]['#markup']), 'plain_text');
  }
}

/**
 * Implements hook_default_rules_configuration_alter().
 */
function luggage_question_answer_default_rules_configuration_alter(&$configs) {
  // Alter the default config for sending email to moderators so that it's
  // based on the name of the role rather than an unpredictable numeric role ID.
  $roleID = array_search('QA Moderator', user_roles());

  $configs['rules_q_a_new_question_mail_moderators'] = entity_import('rules_config', '{ "rules_q_a_new_question_mail_moderators" : {
      "LABEL" : "Q\\u0026A New Question Mail Moderators",
      "PLUGIN" : "reaction rule",
      "OWNER" : "rules",
      "REQUIRES" : [ "rules" ],
      "ON" : { "node_insert--qa" : { "bundle" : "qa" } },
      "DO" : [
        { "mail_to_users_of_role" : {
            "roles" : { "value" : { "' .  $roleID . '" : "' . $roleID . '" } },
            "subject" : "New question for [site:name]",
            "message" : "A new question has been submitted to [site:name]. A Q\\u0026A moderator can log into the site and answer the question on the site at [node:url]\\r\\n\\r\\nFrom: [node:field-qa-name] [node:field-qa-email]\\r\\n\\r\\n[node:field-qa-question-short]\\r\\n\\r\\n[node:field-qa-question]\\r\\n",
            "from" : "[site:mail]"
          }
        }
      ]
    }
  }');
}
